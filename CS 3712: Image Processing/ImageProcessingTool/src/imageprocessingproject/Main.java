/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package imageprocessingproject;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.BufferedImageOp;
import java.awt.image.ConvolveOp;
import java.awt.image.ImageObserver;
import java.awt.image.Kernel;
import java.awt.image.PixelGrabber;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;

/**
 *
 * @author linganesan
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    private File imagepath = null;
    private File savepath = null;
    private int index;
    String nameImagePath = null;
    JFileChooser chooser = new JFileChooser(".");
    private JPanel jContentPane1 = null;
    private JPanel jContentPane2 = null;
    JPanel panel = null;
    JTextArea textArea = null;
    Metadata metadata;
    BufferedImage image = null;
    private boolean savetrigger = true;
    int binc, bdec, scalex, scaley;

    HashMap<String, BufferedImage> imglist;

    public Main() {
        this.imglist = new HashMap<String, BufferedImage>();
        initComponents();
        closedMenuItems();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openmenu = new javax.swing.JMenuItem();
        savemenu = new javax.swing.JMenuItem();
        saveasmenu = new javax.swing.JMenuItem();
        metaDatamenu = new javax.swing.JMenuItem();
        histomenu = new javax.swing.JMenuItem();
        closemenu = new javax.swing.JMenuItem();
        exitmenu = new javax.swing.JMenuItem();
        rgbmenu = new javax.swing.JMenu();
        clonemenu = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        meanmenu = new javax.swing.JMenuItem();
        mediamenu = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        resetmenu = new javax.swing.JMenuItem();
        negmenu = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        verticalmenu = new javax.swing.JMenuItem();
        horizontalmenu = new javax.swing.JMenuItem();
        sharpenmenu = new javax.swing.JMenuItem();
        blurmenu = new javax.swing.JMenuItem();
        edgemenu = new javax.swing.JMenuItem();
        conmenu = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        incmenu = new javax.swing.JMenuItem();
        decmenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        projectmenu = new javax.swing.JMenuItem();

        jMenuItem6.setText("jMenuItem6");

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Image Processing Tool");
        setForeground(new java.awt.Color(195, 243, 231));
        setMinimumSize(new java.awt.Dimension(866, 550));
        setPreferredSize(new java.awt.Dimension(900, 600));
        setType(java.awt.Window.Type.UTILITY);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTabbedPane1.setBackground(new java.awt.Color(185, 254, 246));
        jTabbedPane1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane1.setAutoscrolls(true);
        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 850, 530));
        jTabbedPane1.getAccessibleContext().setAccessibleName("");

        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 670, -1));

        jMenu1.setText("File");

        openmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openmenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/open.jpg"))); // NOI18N
        openmenu.setText("Open");
        openmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openmenuActionPerformed(evt);
            }
        });
        jMenu1.add(openmenu);

        savemenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        savemenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Save.png"))); // NOI18N
        savemenu.setText("Save");
        savemenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savemenuActionPerformed(evt);
            }
        });
        jMenu1.add(savemenu);

        saveasmenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/saveas.png"))); // NOI18N
        saveasmenu.setText("Save As");
        saveasmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveasmenuActionPerformed(evt);
            }
        });
        jMenu1.add(saveasmenu);

        metaDatamenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        metaDatamenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Metadata.jpg"))); // NOI18N
        metaDatamenu.setText("MetaData");
        metaDatamenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metaDatamenuActionPerformed(evt);
            }
        });
        jMenu1.add(metaDatamenu);

        histomenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        histomenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/histo.gif"))); // NOI18N
        histomenu.setText("Histogram");
        histomenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                histomenuActionPerformed(evt);
            }
        });
        jMenu1.add(histomenu);

        closemenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/close.png"))); // NOI18N
        closemenu.setText("Close");
        closemenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closemenuActionPerformed(evt);
            }
        });
        jMenu1.add(closemenu);

        exitmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exitmenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Exit.jpg"))); // NOI18N
        exitmenu.setText("Exit");
        exitmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitmenuActionPerformed(evt);
            }
        });
        jMenu1.add(exitmenu);

        jMenuBar1.add(jMenu1);

        rgbmenu.setText("Edit");

        clonemenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/clone.png"))); // NOI18N
        clonemenu.setText("Clone");
        clonemenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clonemenuActionPerformed(evt);
            }
        });
        rgbmenu.add(clonemenu);

        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Image.PNG"))); // NOI18N
        jMenuItem2.setText("Scale");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        rgbmenu.add(jMenuItem2);

        jMenuItem7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/RGB.jpg"))); // NOI18N
        jMenuItem7.setText("Grayscale");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        rgbmenu.add(jMenuItem7);

        meanmenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/RGB.jpg"))); // NOI18N
        meanmenu.setText("Mean Filter");
        meanmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                meanmenuActionPerformed(evt);
            }
        });
        rgbmenu.add(meanmenu);

        mediamenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/RGB.jpg"))); // NOI18N
        mediamenu.setText("Median Filter");
        mediamenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mediamenuActionPerformed(evt);
            }
        });
        rgbmenu.add(mediamenu);

        jMenuBar1.add(rgbmenu);

        jMenu3.setText("Tools");

        resetmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        resetmenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/reset.png"))); // NOI18N
        resetmenu.setText("Reset");
        resetmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetmenuActionPerformed(evt);
            }
        });
        jMenu3.add(resetmenu);

        negmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        negmenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/negative.gif"))); // NOI18N
        negmenu.setText("Negative");
        negmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negmenuActionPerformed(evt);
            }
        });
        jMenu3.add(negmenu);

        jMenu5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Image.PNG"))); // NOI18N
        jMenu5.setText("Flip");

        verticalmenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Image.PNG"))); // NOI18N
        verticalmenu.setText("Vertical");
        verticalmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verticalmenuActionPerformed(evt);
            }
        });
        jMenu5.add(verticalmenu);

        horizontalmenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Image.PNG"))); // NOI18N
        horizontalmenu.setText("Horizontal");
        horizontalmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horizontalmenuActionPerformed(evt);
            }
        });
        jMenu5.add(horizontalmenu);

        jMenu3.add(jMenu5);

        sharpenmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        sharpenmenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Image.PNG"))); // NOI18N
        sharpenmenu.setText("Sharpen");
        sharpenmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sharpenmenuActionPerformed(evt);
            }
        });
        jMenu3.add(sharpenmenu);

        blurmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        blurmenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Image.PNG"))); // NOI18N
        blurmenu.setText("Blur");
        blurmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blurmenuActionPerformed(evt);
            }
        });
        jMenu3.add(blurmenu);

        edgemenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        edgemenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Image.PNG"))); // NOI18N
        edgemenu.setText("Edge detect");
        edgemenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edgemenuActionPerformed(evt);
            }
        });
        jMenu3.add(edgemenu);

        conmenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Image.PNG"))); // NOI18N
        conmenu.setText("Contrast");

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Increase");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        conmenu.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Decrease");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        conmenu.add(jMenuItem4);

        jMenu3.add(conmenu);

        jMenu4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Image.PNG"))); // NOI18N
        jMenu4.setText("Brightness");

        incmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        incmenu.setText("Increase");
        incmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                incmenuActionPerformed(evt);
            }
        });
        jMenu4.add(incmenu);

        decmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        decmenu.setText("Decrease");
        decmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decmenuActionPerformed(evt);
            }
        });
        jMenu4.add(decmenu);

        jMenu3.add(jMenu4);

        jMenuBar1.add(jMenu3);

        jMenu2.setText("About");

        projectmenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/INFO.PNG"))); // NOI18N
        projectmenu.setText("Project");
        projectmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectmenuActionPerformed(evt);
            }
        });
        jMenu2.add(projectmenu);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

//Click open menu
    private void openmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openmenuActionPerformed
        openDialog();

    }//GEN-LAST:event_openmenuActionPerformed
//Click close menu item
    private void closemenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closemenuActionPerformed
        closedMenuItems();
    }//GEN-LAST:event_closemenuActionPerformed

    private void savemenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savemenuActionPerformed
        if (savetrigger) {
            saveAs();
        } else {
            save();
        }
    }//GEN-LAST:event_savemenuActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        BufferedImage temp = grayscale(image, 3);
        addTab(temp, "GrayScale");
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void metaDatamenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metaDatamenuActionPerformed
        metadata = new Metadata();
        textArea = metadata.readAndDisplayMetadata(nameImagePath);
        try {
            String s = textArea.getText();
            File f = new File("metadata.txt");
            FileWriter fw = new FileWriter(f);
            fw.write(s);
            fw.flush();
            fw.close();
        } catch (IOException ioe) {
            System.out.println("Exception Caught : " + ioe.getMessage());
        }
        jTabbedPane1.add("MetaData", textArea);
    }//GEN-LAST:event_metaDatamenuActionPerformed
//save as method call
    private void saveasmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveasmenuActionPerformed
        saveAs();

    }//GEN-LAST:event_saveasmenuActionPerformed

    private void exitmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitmenuActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitmenuActionPerformed

    private void clonemenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clonemenuActionPerformed
        addTab(image, "Clone");
    }//GEN-LAST:event_clonemenuActionPerformed

    private void histomenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_histomenuActionPerformed
        Histogram();
    }//GEN-LAST:event_histomenuActionPerformed

    private void projectmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectmenuActionPerformed
        JOptionPane jOptionPane = new JOptionPane();
        JTextArea jTextArea = new JTextArea();
        jTextArea.setEditable(false);
        jTextArea.setText("Name : Linganesan \n"
                + "Module : CS3712 \n"
                + "Reg No : 120337H \n"
                + "Email Id : linganesan.12@cse.mrt.ac.lk\n"
        );
        jOptionPane.showMessageDialog(null,
                jTextArea,
                "Image Processing Tool",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_projectmenuActionPerformed

    private void negmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negmenuActionPerformed
        BufferedImage temp = negativeimage(image);
        addTab(temp, "Negative");

    }//GEN-LAST:event_negmenuActionPerformed

    private void resetmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetmenuActionPerformed
        try {
            JPanel temppane = getJContentPane1();
            index = jTabbedPane1.getSelectedIndex();
            jTabbedPane1.setComponentAt(index, temppane);
            binc = 0;
            bdec = 0;
            index = 0;

        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_resetmenuActionPerformed

    private void incmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_incmenuActionPerformed
        brightinc();
    }//GEN-LAST:event_incmenuActionPerformed

    private void decmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decmenuActionPerformed
        brightdec();
    }//GEN-LAST:event_decmenuActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        createScalePanel();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed

    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void meanmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_meanmenuActionPerformed
        BufferedImage meanimage = null;
        if (imglist.containsKey("mean")) {
            meanimage = imglist.get("mean");
        } else {
            meanimage = image;
        }
        BufferedImage temp = medianFilter(meanimage);
        temp = medianFilter(temp);
        addTab(temp, "Mean Filter");
    }//GEN-LAST:event_meanmenuActionPerformed

    private void mediamenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mediamenuActionPerformed
        BufferedImage medianimage = null;
        if (imglist.containsKey("median")) {
            medianimage = imglist.get("median");
        } else {
            medianimage = image;
        }
        BufferedImage temp = meanFilter(medianimage);
        temp = meanFilter(temp);
        addTab(temp, "Median Filter");
    }//GEN-LAST:event_mediamenuActionPerformed

    private void sharpenmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sharpenmenuActionPerformed
        BufferedImage temp = sharpen(image);
        imglist.put("sharp", temp);
        addTab(temp, "Sharpen Image");
    }//GEN-LAST:event_sharpenmenuActionPerformed

    private void blurmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blurmenuActionPerformed
        BufferedImage temp = blur(image);
        temp = blur(temp);
        imglist.put("blur", temp);
        addTab(temp, "Blur Image");
    }//GEN-LAST:event_blurmenuActionPerformed

    private void edgemenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edgemenuActionPerformed
        BufferedImage temp = edge(image);
        imglist.put("edge", temp);
        addTab(temp, "Edge detect");
    }//GEN-LAST:event_edgemenuActionPerformed

    private void verticalmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verticalmenuActionPerformed
        BufferedImage temp = invertVertical(image);
        imglist.put("flipV", temp);
        addTab(temp, "Flip Vertical");
    }//GEN-LAST:event_verticalmenuActionPerformed

    private void horizontalmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horizontalmenuActionPerformed
        BufferedImage temp = invertHorizontal(image);
        imglist.put("flipH", temp);
        addTab(temp, "Flip Horizontal");
    }//GEN-LAST:event_horizontalmenuActionPerformed

    private void save() {
        BufferedImage bi = null;

        try {
            bi = ImageIO.read(imagepath);
        } catch (IOException ex) {
            //Logger.gteLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            ImageIO.write(bi, "jpeg", savepath);
        } catch (IOException ex) {
        }

    }

    private void saveAs() {
        BufferedImage bi = null;

        // try {
        bi = selectImage();
        //bi = ImageIO.read(imagepath);
        // } catch (IOException ex) {
        //    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        // }
        // Demonstrate "Save" dialog:
        File saveFile = imagepath;
        JFileChooser chooser = new JFileChooser();
        chooser.setSelectedFile(saveFile);
        int rval = chooser.showSaveDialog(this);
        if (rval == JFileChooser.APPROVE_OPTION) {
            saveFile = chooser.getSelectedFile();
            savepath = saveFile;
            try {
                ImageIO.write(bi, "jpeg", saveFile);
                savetrigger = false;
            } catch (IOException ex) {
            }
        }
    }

    private void closedMenuItems() {
        savemenu.setEnabled(false);
        saveasmenu.setEnabled(false);
        metaDatamenu.setEnabled(false);
        closemenu.setEnabled(false);
        clonemenu.setEnabled(false);
        rgbmenu.setEnabled(false);
        histomenu.setEnabled(false);
        jMenu3.setEnabled(false);
        openmenu.setEnabled(true);
        savepath = null;
        imagepath = null;
        image = null;
        nameImagePath = null;
        jContentPane1 = null;
        jContentPane2 = null;
        panel = null;
        textArea = null;
        binc = 0;
        bdec = 0;
        index = 0;
        jTabbedPane1.removeAll();

    }

    private void openMenuItems() {
        savemenu.setEnabled(true);
        saveasmenu.setEnabled(true);
        metaDatamenu.setEnabled(true);
        closemenu.setEnabled(true);
        clonemenu.setEnabled(true);
        rgbmenu.setEnabled(true);
        histomenu.setEnabled(true);
        jMenu3.setEnabled(true);
        openmenu.setEnabled(false);
    }

    public void addTab(BufferedImage image, String title) {

        JLabel label = new JLabel();
        label.setHorizontalAlignment(JLabel.CENTER);
        JPanel temppane = new JPanel();

        Image scaled = image.getScaledInstance(500, 500, Image.SCALE_SMOOTH);
        ImageIcon icon = new ImageIcon(scaled);
        label.setIcon(icon);
        temppane.add(label, BorderLayout.CENTER);
        temppane.revalidate();
        jTabbedPane1.addTab(title, temppane);

    }

    private void openDialog() {
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            //System.out.println("selectedFile = " + chooser.getSelectedFile());
            nameImagePath = chooser.getSelectedFile().getAbsolutePath();
            //System.out.println("nameImagePath = " + nameImagePath);

            try {
                panel = getJContentPane1();
                jTabbedPane1.addTab(nameImagePath, panel);

                openMenuItems();
            } catch (IOException e) {
                System.out.println("io error: " + e.getMessage());
                return;
            }
        }
    }

    private BufferedImage selectImage() {
        index = jTabbedPane1.getSelectedIndex();
        String s = jTabbedPane1.getTitleAt(index);

        if (s == "Negative") {
            return negativeimage(image);
        } else if (s == "Clone") {
            return image;
        } else if (s == "Scaled Image") {
            System.out.println("scale");
            return imglist.get("scale");
        } else if (imglist.containsKey("bright")) {
            System.out.println("bright");
            return imglist.get("bright");
        } else if (s == "GrayScale") {
            return grayscale(image, 3);
        } else if (s == "Mean Filter") {
            return imglist.get("mean");
        } else if (s == "Sharpen Image") {
            return imglist.get("sharp");
        } else if (s == "Edge detect") {
            return imglist.get("edge");
        } else if (s == "Median Filter") {
            return imglist.get("median");
        } else if (s == "Blur Image") {
            return imglist.get("blur");
        } else if (s == "Flip Vertical") {
            return imglist.get("flipV");
        } else if (s == "Flip Horizontal") {
            return imglist.get("flipH");
        } else {
            return image;
        }

    }

    private JPanel getJContentPane1() throws IOException {
        if (jContentPane1 == null) {
            jContentPane1 = new JPanel();
            jContentPane1.setLayout(new BorderLayout());
        }
        // jContentPane1.removeAll();
        JLabel label = new JLabel();
        label.setHorizontalAlignment(JLabel.CENTER);
        if (nameImagePath != null) {
            File file = new File(nameImagePath);
            imagepath = file;
            System.out.println("file path = " + file.getPath());
            image = ImageIO.read(file);
            Image scaled = image.getScaledInstance(500, 500, Image.SCALE_SMOOTH);
            ImageIcon icon = new ImageIcon(scaled);
            label.setIcon(icon);
        } else {
            label.setText("namePathImage = " + nameImagePath);
        }
        jContentPane1.add(label, BorderLayout.CENTER);

        jContentPane1.revalidate();
        return jContentPane1;
    }
//generate histogram

    public void Histogram() {
        histogram m = new histogram(image, "Histogram");
        Toolkit tk = Toolkit.getDefaultToolkit();
        Dimension d = tk.getScreenSize();
        m.setBounds(0, 0, (int) d.getWidth(), (int) d.getHeight());
        m.setVisible(true);
    }
//changed to negative image

    BufferedImage negativeimage(BufferedImage image) {
        int w = image.getWidth(this);
        int h = image.getHeight(this);
        int c, red, green, blue;
        BufferedImage newImage = new BufferedImage(w, h, 1);
        for (int y = 0; y < h; y++) {
            for (int x = 0; x < w; x++) {
                c = image.getRGB(x, y);
                red = 255 - getRed(c);
                green = 255 - getGreen(c);
                blue = 255 - getBlue(c);

                newImage.setRGB(x, y, createRGB(red, green, blue));
            }
        }
        return newImage;
    }
//change to grayscale image
//Gray = (Red + Green + Blue) / 3

    BufferedImage grayscale(BufferedImage image, int d) {
        int c, red, green, blue, avg;
        int w = image.getWidth(this);
        int h = image.getHeight(this);
        BufferedImage newImage = new BufferedImage(w, h, 1);

        for (int y = 0; y < h; y++) {
            for (int x = 0; x < w; x++) {
                c = image.getRGB(x, y);
                red = getRed(c);
                green = getGreen(c);
                blue = getBlue(c);
                avg = (red + green + blue) / d;
                newImage.setRGB(x, y, createRGB(avg, avg, avg));
            }
        }
        return newImage;
    }
//Change brightness of the selected image

    BufferedImage brightness(BufferedImage image, int xx) {
        int w = image.getWidth(this);
        int h = image.getHeight(this);
        int c, red, green, blue;
        BufferedImage newImage = new BufferedImage(w, h, 1);
        for (int y = 0; y < h; y++) {
            for (int x = 0; x < w; x++) {
                c = image.getRGB(x, y);
                red = getRed(c) + xx;
                green = getGreen(c) + xx;
                blue = getBlue(c) + xx;

                if (red > 255) {
                    red = 255;
                }
                if (green > 255) {
                    green = 255;
                }
                if (blue > 255) {
                    blue = 255;
                }

                if (red < 0) {
                    red = 0;
                }
                if (green < 0) {
                    green = 0;
                }
                if (blue < 0) {
                    blue = 0;
                }

                newImage.setRGB(x, y, createRGB(red, green, blue));

            }

        }
        imglist.put("bright", newImage);
        return newImage;

    }

    BufferedImage contrast(BufferedImage image, int xx) {
        int w = image.getWidth(this);
        int h = image.getHeight(this);
        int c, red, green, blue;
        BufferedImage newImage = new BufferedImage(w, h, 1);
        for (int y = 0; y < h; y++) {
            for (int x = 0; x < w; x++) {

                c = image.getRGB(x, y);
                //Retrieving the Red, Green and Blue section of every pixel  
                red = getRed(c) + xx;
                green = getGreen(c) + xx;
                blue = getBlue(c) + xx;

                //Rounding of to 255 
                if (red > 255) {
                    red = 255;
                }
                if (green > 255) {
                    green = 255;
                }
                if (blue > 255) {
                    blue = 255;
                }

                if (red < 0) {
                    red = 0;
                }
                if (green < 0) {
                    green = 0;
                }
                if (blue < 0) {
                    blue = 0;
                }

                newImage.setRGB(x, y, createRGB(red, green, blue));

            }

        }
        imglist.put("bright", newImage);
        return newImage;

    }

    public BufferedImage invertVertical(BufferedImage image) {

        int w = image.getWidth(this);
        int h = image.getHeight(this);
        int x = 0, y = 0;
        int[] flippixels = new int[w * h];
        int[] pixels = new int[w * h];

        PixelGrabber pg = new PixelGrabber(image, x, y, w, h, pixels, 0, w);
        try {
            pg.grabPixels();
        } catch (InterruptedException e) {
            System.err.println("interrupted waiting for pixels!");
            return null;
        }
        if ((pg.getStatus() & ImageObserver.ABORT) != 0) {
            System.err.println("image fetch aborted or errored");
            return null;
        }
        //Looping through every pixel of the input image 
        for (int j = 0; j < h; j++) {
            for (int i = 0; i < w; i++) {

                flippixels[j * w + i] = pixels[j * w + (w - i - 1)];
            }

        }
        BufferedImage flipimage = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
        flipimage.setRGB(0, 0, w, h, flippixels, 0, w);

        return flipimage;
    }
//flip horizontally

    public BufferedImage invertHorizontal(BufferedImage image) {

        int w = image.getWidth(this);
        int h = image.getHeight(this);
        int x = 0, y = 0;
        int[] flippixels = new int[w * h];
        int[] pixels = new int[w * h];

        PixelGrabber pg = new PixelGrabber(image, x, y, w, h, pixels, 0, w);
        try {
            pg.grabPixels();
        } catch (InterruptedException e) {
            System.err.println("interrupted waiting for pixels!");
            return null;
        }
        if ((pg.getStatus() & ImageObserver.ABORT) != 0) {
            System.err.println("image fetch aborted or errored");
            return null;
        }
        //Looping through every pixel of the input image 
        for (int j = 0; j < h; j++) {
            for (int i = 0; i < w; i++) {

                flippixels[j * w + i] = pixels[(w * h - w * (j + 1)) + i];
            }
        }
        BufferedImage flipimage = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
        flipimage.setRGB(0, 0, w, h, flippixels, 0, w);

        return flipimage;
    }

    //Scaleup the image
    BufferedImage scale(BufferedImage image1, int rx, int ry) {
        AffineTransform tx = new AffineTransform();
        tx.scale(rx, ry);
        AffineTransformOp op = new AffineTransformOp(tx, null);
        BufferedImage temp = op.filter(image1, null);
        return temp;
    }

    public int getAlpha(int p) {
        return ((p >> 24) & 0xFF);
    }

    public int getRed(int p) {
        return ((p >> 16) & 0xFF);
    }

    public int getGreen(int p) {
        return ((p >> 8) & 0xFF);
    }

    public int getBlue(int p) {
        return (p & 0xff);
    }

    public int createRGB(int r, int g, int b) {
        //alpha =FF
        return new Color(r, g, b).getRGB();

    }

    public void brightinc() {
        binc += 10;
        BufferedImage temp;
        temp = brightness(image, binc);
        index = jTabbedPane1.getSelectedIndex();
        System.out.println(binc);
        changeImage(index, temp);
    }

    public void brightdec() {
        bdec -= 10;
        BufferedImage temp;
        temp = brightness(image, bdec);
        index = jTabbedPane1.getSelectedIndex();
        System.out.println(bdec);
        changeImage(index, temp);
    }

    private void changeImage(int index, BufferedImage ima) {

        JLabel label = new JLabel();
        label.setHorizontalAlignment(JLabel.CENTER);
        JPanel temppane = new JPanel();
        Image scaled = ima.getScaledInstance(500, 500, Image.SCALE_SMOOTH);
        ImageIcon icon = new ImageIcon(scaled);
        label.setIcon(icon);
        temppane.add(label, BorderLayout.CENTER);
        //temppane.revalidate();
        jTabbedPane1.setComponentAt(index, temppane);
    }

    private void createScalePanel() {

        final String[] labels = {"X: ", "Y:"};
        int labelsLength = labels.length;
        final JTextField[] textField = new JTextField[labels.length];
        //Create and populate the panel.
        JPanel p = new JPanel(new GridLayout(0, 2));
        for (int i = 0; i < labelsLength; i++) {
            JLabel l = new JLabel(labels[i], JLabel.TRAILING);
            p.add(l);
            textField[i] = new JTextField(10);
            l.setLabelFor(textField[i]);
            p.add(textField[i]);
        }

        int result = JOptionPane.showConfirmDialog(null, p, "Enter Scales", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            scalex = Integer.parseInt(textField[0].getText());
            scaley = Integer.parseInt(textField[1].getText());
            BufferedImage img = scale(image, scalex, scaley);
            imglist.put("scale", img);
            addTab(img, "Scaled Image");

        }

    }

    BufferedImage meanFilter(BufferedImage img) {
        int w = img.getWidth(null);
        int h = img.getHeight(null);
        BufferedImage tempimage;
        BufferedImage meanimage = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
        int data[] = new int[9];
        int red[] = new int[9];
        int green[] = new int[9];
        int blue[] = new int[9];
        for (int y = 1; y < h - 1; y++) {
            for (int x = 1; x < w - 1; x++) {
                tempimage = img.getSubimage(x - 1, y - 1, 3, 3);
                tempimage.getRGB(0, 0, 3, 3, data, 0, 3);
                for (int k = 0; k < 9; k++) {
                    Color c = new Color(data[k]);
                    red[k] = c.getRed();
                    green[k] = c.getGreen();
                    blue[k] = c.getBlue();
                }
                int r = meanValue(red);
                int g = meanValue(green);
                int b = meanValue(blue);
                Color c = new Color(r, g, b);
                meanimage.setRGB(x, y, c.getRGB());
            }
        }
        imglist.put("mean", meanimage);
        return meanimage;
    }

    BufferedImage medianFilter(BufferedImage img) {
        int w = img.getWidth(null);
        int h = img.getHeight(null);
        BufferedImage tempimage;
        BufferedImage medianimage = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
        int data[] = new int[9];
        int red[] = new int[9];
        int green[] = new int[9];
        int blue[] = new int[9];
        for (int y = 1; y < h - 1; y++) {
            for (int x = 1; x < w - 1; x++) {
                tempimage = img.getSubimage(x - 1, y - 1, 3, 3);
                tempimage.getRGB(0, 0, 3, 3, data, 0, 3);
                for (int k = 0; k < 9; k++) {
                    Color c = new Color(data[k]);
                    red[k] = c.getRed();
                    green[k] = c.getGreen();
                    blue[k] = c.getBlue();
                }
                int r = medianValue(red);
                int g = medianValue(green);
                int b = medianValue(blue);
                Color c = new Color(r, g, b);
                medianimage.setRGB(x, y, c.getRGB());
            }
        }
        imglist.put("median", medianimage);
        return medianimage;
    }
//mean value calculation

    int meanValue(int a[]) {
        int sum = 0;
        for (int i = 0; i < 9; i++) {
            sum += a[i];
        }
        return sum / 9;
    }
//median value calculation

    int medianValue(int a[]) {
        int temp;
        for (int i = 0; i < 8; i++) {
            for (int j = i + 1; j < 9; j++) {
                if (a[j] < a[i]) {
                    temp = a[i];
                    a[i] = a[j];
                    a[j] = temp;
                }
            }
        }
        return a[4];
    }

//    BufferedImage rotate(BufferedImage image1) {
//        AffineTransform tx = new AffineTransform();
//        tx.rotate(1 * Math.PI, 50, 50);
//        AffineTransformOp op = new AffineTransformOp(tx, null);
//        return op.filter(image1, null);
//
//    }
    private BufferedImage filter(BufferedImageOp op, BufferedImage img) {
        BufferedImage filteredImage = new BufferedImage(img.getWidth(), img.getHeight(), img.getType());
        op.filter(img, filteredImage);

        img = filteredImage;
        return img;
    }

    private BufferedImage convolve(float[] elements, BufferedImage img) {
        //do for 3X3 matrix
        Kernel kernel = new Kernel(3, 3, elements);
        ConvolveOp op = new ConvolveOp(kernel);
        return filter(op, img);
    }

//Each pixel on a full 3×3 grid weighted by 1/9.
    public BufferedImage blur(BufferedImage img) {
        float weight = 1.0f / 9.0f;
        float[] elements = new float[9];

        for (int i = 0; i < 9; i++) {
            elements[i] = weight;
        }
        return convolve(elements, img);
    }

    public BufferedImage sharpen(BufferedImage img) {
        float[] elements = {0.0f, -1.0f, 0.0f, -1.0f, 5.0f, -1.0f, 0.0f, -1.0f, 0.0f};
        return convolve(elements, img);
    }

    BufferedImage edge(BufferedImage img) {
        float[] elements = {0.0f, -1.0f, 0.0f, -1.0f, 4.0f, -1.0f, 0.0f, -1.0f, 0.0f};
        return convolve(elements, img);
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem blurmenu;
    private javax.swing.JMenuItem clonemenu;
    private javax.swing.JMenuItem closemenu;
    private javax.swing.JMenu conmenu;
    private javax.swing.JMenuItem decmenu;
    private javax.swing.JMenuItem edgemenu;
    private javax.swing.JMenuItem exitmenu;
    private javax.swing.JMenuItem histomenu;
    private javax.swing.JMenuItem horizontalmenu;
    private javax.swing.JMenuItem incmenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenuItem meanmenu;
    private javax.swing.JMenuItem mediamenu;
    private javax.swing.JMenuItem metaDatamenu;
    private javax.swing.JMenuItem negmenu;
    private javax.swing.JMenuItem openmenu;
    private javax.swing.JMenuItem projectmenu;
    private javax.swing.JMenuItem resetmenu;
    private javax.swing.JMenu rgbmenu;
    private javax.swing.JMenuItem saveasmenu;
    private javax.swing.JMenuItem savemenu;
    private javax.swing.JMenuItem sharpenmenu;
    private javax.swing.JMenuItem verticalmenu;
    // End of variables declaration//GEN-END:variables

}
